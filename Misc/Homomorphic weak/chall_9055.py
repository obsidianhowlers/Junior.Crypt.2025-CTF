from Crypto.Util.number import getPrime, isPrime, bytes_to_long
import random
from math import gcd

def generate_keys(bit_length=512, max_diff=10000):
    """Генерирует параметры криптосистемы"""
    while True:
        p = getPrime(bit_length // 2)
        q = p + random.randint(1, max_diff)
        if isPrime(q) and gcd(p*q, (p-1)*(q-1)) == 1:  # Проверяем, что q тоже простое
            n = p * q
            g = n + 1   # Стандартный выбор g
            return (n, g)

def encrypt(m, n, g):
    """Шифрование сообщения m """
    r = random.randint(1, n - 1)  # Случайное r
    c = (pow(g, m, n**2) * pow(r, n, n**2)) % n**2
    return c

# Создаем флаг
flag = b"CTF{Redacted_FLAG}"
m = bytes_to_long(flag)

# Создаем ключи
public_key = generate_keys()
n, g = public_key

# Шифруем флаг
c = encrypt(m, n, g)

# Выводим данные для участников CTF
print("Public Key (n, g):")
print(f"n = {n}")
print(f"g = {g}\n")
print("Encrypted Flag (c):")
print(f"c = {c}\n")

=========================

Public Key (n, g):
n = 8242620732262909867878113281012018732278863945420526557791199254408257645474897397593577196677011122595919740541591920781506102495280619868063408571075243
g = 8242620732262909867878113281012018732278863945420526557791199254408257645474897397593577196677011122595919740541591920781506102495280619868063408571075244

Encrypted Flag (c):
c = 20530188269857033227552501374512492063210340036515162066082507507361374259664195970635336752542990474419048162794543137690229029552303482501325914475518269059105250902383881689172038649928553356614692672188510858274714501424154824636569505416997036242381758585152998128009272173679378880154204715815820964451